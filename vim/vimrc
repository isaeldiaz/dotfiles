set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-surround'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'godlygeek/tabular'
Plugin 'juneedahamed/svnj.vim'
Plugin 'nachumk/systemverilog.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'finbarrocallaghan/highlights.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"==================================================

 set expandtab
 set tabstop=2
 set shiftwidth=2
 filetype indent on
 set hlsearch
 set number
 set nomousehide
 set mouse=a
 
 " this turns off physical line wrapping (ie: automatic insertion of newlines)
 set textwidth=0 wrapmargin=0
 set formatoptions-=t
 
 "Buffer explorer mapping
 nnoremap <C-LeftMouse> :BufExplorer<CR>
 
 "Show all hidden characters except spaces
 set listchars=tab:>-,trail:~,extends:>,precedes:<
 set list
 
 "set spell spelllang=en_us
 
 
 "press \w to toggle wrapping on or off 
 noremap <silent> <Leader>w :call ToggleWrap()<CR>
 function ToggleWrap()
   if &wrap
     echo "Wrap OFF"
     setlocal nowrap
     set virtualedit=all
     set guioptions+=b
     silent! nunmap <buffer> <Up>
     silent! nunmap <buffer> <Down>
     silent! nunmap <buffer> <Home>
     silent! nunmap <buffer> <End>
     silent! iunmap <buffer> <Up>
     silent! iunmap <buffer> <Down>
     silent! iunmap <buffer> <Home>
     silent! iunmap <buffer> <End>
   else
     echo "Wrap ON"
     setlocal wrap linebreak nolist
     set virtualedit=
     set guioptions-=b
     setlocal display+=lastline
     noremap  <buffer> <silent> <Up>   gk
     noremap  <buffer> <silent> <Down> gj
     noremap  <buffer> <silent> <Home> g<Home>
     noremap  <buffer> <silent> <End>  g<End>
     inoremap <buffer> <silent> <Up>   <C-o>gk
     inoremap <buffer> <silent> <Down> <C-o>gj
     inoremap <buffer> <silent> <Home> <C-o>g<Home>
     inoremap <buffer> <silent> <End>  <C-o>g<End>
   endif
 endfunction
 
 "The cursor movement keys are mapped to move by display lines
 noremap  <buffer> <silent> k gk
 noremap  <buffer> <silent> j gj
 noremap  <buffer> <silent> 0 g0
 noremap  <buffer> <silent> $ g$
 
 "To place yanked text into the global clipboard
 "set clipboard=unnamedplus
 
 "To visually select text then press ~ to convert the text to UPPER CASE, then to lower case, then to Title Case. Keep pressing ~ until you get the case you want
 function! TwiddleCase(str)
   if a:str ==# toupper(a:str)
     let result = tolower(a:str)
   elseif a:str ==# tolower(a:str)
     let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
   else
     let result = toupper(a:str)
   endif
   return result
 endfunction
 vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv
 
 "To get the mouse popup on right-click
 set mousemodel=popup
 
 "To insert blank lines without entering insert mode
 noremap <silent> <C-o> o<Esc>j
 
"Change Color theme
syntax enable
if has('gui_running')
    set background=dark
    colorscheme solarized
    call togglebg#map("<F5>")
endif

" associate *.r with Xml filetype
au BufRead,BufNewFile *.r set filetype=xml
